package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// DiceMock implements unit.Dice
type DiceMock struct {
	t minimock.Tester

	funcThrow          func() (i1 int)
	inspectFuncThrow   func()
	afterThrowCounter  uint64
	beforeThrowCounter uint64
	ThrowMock          mDiceMockThrow
}

// NewDiceMock returns a mock for unit.Dice
func NewDiceMock(t minimock.Tester) *DiceMock {
	m := &DiceMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ThrowMock = mDiceMockThrow{mock: m}

	return m
}

type mDiceMockThrow struct {
	mock               *DiceMock
	defaultExpectation *DiceMockThrowExpectation
	expectations       []*DiceMockThrowExpectation
}

// DiceMockThrowExpectation specifies expectation struct of the Dice.Throw
type DiceMockThrowExpectation struct {
	mock *DiceMock

	results *DiceMockThrowResults
	Counter uint64
}

// DiceMockThrowResults contains results of the Dice.Throw
type DiceMockThrowResults struct {
	i1 int
}

// Expect sets up expected params for Dice.Throw
func (mmThrow *mDiceMockThrow) Expect() *mDiceMockThrow {
	if mmThrow.mock.funcThrow != nil {
		mmThrow.mock.t.Fatalf("DiceMock.Throw mock is already set by Set")
	}

	if mmThrow.defaultExpectation == nil {
		mmThrow.defaultExpectation = &DiceMockThrowExpectation{}
	}

	return mmThrow
}

// Inspect accepts an inspector function that has same arguments as the Dice.Throw
func (mmThrow *mDiceMockThrow) Inspect(f func()) *mDiceMockThrow {
	if mmThrow.mock.inspectFuncThrow != nil {
		mmThrow.mock.t.Fatalf("Inspect function is already set for DiceMock.Throw")
	}

	mmThrow.mock.inspectFuncThrow = f

	return mmThrow
}

// Return sets up results that will be returned by Dice.Throw
func (mmThrow *mDiceMockThrow) Return(i1 int) *DiceMock {
	if mmThrow.mock.funcThrow != nil {
		mmThrow.mock.t.Fatalf("DiceMock.Throw mock is already set by Set")
	}

	if mmThrow.defaultExpectation == nil {
		mmThrow.defaultExpectation = &DiceMockThrowExpectation{mock: mmThrow.mock}
	}
	mmThrow.defaultExpectation.results = &DiceMockThrowResults{i1}
	return mmThrow.mock
}

//Set uses given function f to mock the Dice.Throw method
func (mmThrow *mDiceMockThrow) Set(f func() (i1 int)) *DiceMock {
	if mmThrow.defaultExpectation != nil {
		mmThrow.mock.t.Fatalf("Default expectation is already set for the Dice.Throw method")
	}

	if len(mmThrow.expectations) > 0 {
		mmThrow.mock.t.Fatalf("Some expectations are already set for the Dice.Throw method")
	}

	mmThrow.mock.funcThrow = f
	return mmThrow.mock
}

// Throw implements unit.Dice
func (mmThrow *DiceMock) Throw() (i1 int) {
	mm_atomic.AddUint64(&mmThrow.beforeThrowCounter, 1)
	defer mm_atomic.AddUint64(&mmThrow.afterThrowCounter, 1)

	if mmThrow.inspectFuncThrow != nil {
		mmThrow.inspectFuncThrow()
	}

	if mmThrow.ThrowMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmThrow.ThrowMock.defaultExpectation.Counter, 1)

		mm_results := mmThrow.ThrowMock.defaultExpectation.results
		if mm_results == nil {
			mmThrow.t.Fatal("No results are set for the DiceMock.Throw")
		}
		return (*mm_results).i1
	}
	if mmThrow.funcThrow != nil {
		return mmThrow.funcThrow()
	}
	mmThrow.t.Fatalf("Unexpected call to DiceMock.Throw.")
	return
}

// ThrowAfterCounter returns a count of finished DiceMock.Throw invocations
func (mmThrow *DiceMock) ThrowAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmThrow.afterThrowCounter)
}

// ThrowBeforeCounter returns a count of DiceMock.Throw invocations
func (mmThrow *DiceMock) ThrowBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmThrow.beforeThrowCounter)
}

// MinimockThrowDone returns true if the count of the Throw invocations corresponds
// the number of defined expectations
func (m *DiceMock) MinimockThrowDone() bool {
	for _, e := range m.ThrowMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ThrowMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterThrowCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcThrow != nil && mm_atomic.LoadUint64(&m.afterThrowCounter) < 1 {
		return false
	}
	return true
}

// MinimockThrowInspect logs each unmet expectation
func (m *DiceMock) MinimockThrowInspect() {
	for _, e := range m.ThrowMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to DiceMock.Throw")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ThrowMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterThrowCounter) < 1 {
		m.t.Error("Expected call to DiceMock.Throw")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcThrow != nil && mm_atomic.LoadUint64(&m.afterThrowCounter) < 1 {
		m.t.Error("Expected call to DiceMock.Throw")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *DiceMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockThrowInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *DiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *DiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockThrowDone()
}
